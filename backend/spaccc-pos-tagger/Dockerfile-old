# https://pythonspeed.com/articles/pipenv-docker/

# FROM python:3.7
# RUN pip install pipenv
# COPY Pipfile* /tmp/
# RUN cd /tmp && pipenv lock --requirements > requirements.txt
# RUN pip install -r /tmp/requirements.txt
# COPY . /tmp/myapp
# RUN pip install /tmp/myapp
# CMD flask run exampleapp:app

# -----------------------------------------------------------------------------

# https://takacsmark.com/docker-compose-tutorial-beginners-by-example-basics/

# FROM python:3.7.0-alpine3.8
# WORKDIR /usr/src/app
# COPY . .
# RUN pip install --upgrade pip
# RUN pip install pipenv
# RUN pipenv install
# RUN pipenv lock --requirements > requirements.txt
# RUN pip install --no-cache-dir -r requirements.txt
# ENV FLASK_APP=app.py
# CMD flask run

# -----------------------------------------------------------------------------

# https://www.bogotobogo.com/DevOps/Docker/Docker-Compose-FlaskREST-Service-Container-and-Apache-Container.php

# https://hub.docker.com/r/library/python/tags/
FROM python:3-onbuild
# FROM ubuntu:18.04

# Coping source in current directory into the image
# python:3-onbuild expects the source in /usr/src/app
COPY . /usr/src/app
WORKDIR /usr/src/app

# # Install docker -- version 1 download packages with apt
# RUN apt update
# RUN apt install -y \
#     apt-transport-https \
#     ca-certificates \
#     curl \
#     gnupg-agent \
#     software-properties-common
# RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
# RUN apt-key fingerprint 0EBFCD88
# RUN add-apt-repository \
#    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
#    $(lsb_release -cs) \
#    stable"
# RUN apt update
# RUN apt install -y docker-ce docker-ce-cli containerd.io

# # Install docker -- version 2 install downloaded .deb files with dpkg
# # RUN dpkg -i docker-ce_19.03.2_3-0_ubuntu-bionic_amd64.deb
# # RUN dpkg -i docker-ce-cli_19.03.2_3-0_ubuntu-bionic_amd64.deb
# # RUN dpkg -i containerd.io_1.2.6-3_amd64.deb

# # https://forums.docker.com/t/cannot-connect-to-the-docker-daemon-is-the-docker-daemon-running-on-this-host/8925/3
# # RUN nohup docker daemon -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock &
# # RUN usermod -aG docker

# RUN apt install -y libltdl7

# # ? run docker inside the container
# # RUN docker run --privileged -d docker:dind

# # Load the POS MEDICAL TAGGER docker contained in the .tar file
# RUN docker load --input med_tagger.tar

# Commands in a list
CMD ["python", "app.py"]